// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/kurneo/go-template/internal/auth"
	"github.com/kurneo/go-template/internal/category"
	"github.com/kurneo/go-template/pkg"
)

// Injectors from wire.go:

func InitializeApp() App {
	contract := pkg.ResolveLogInstance()
	databaseContract := pkg.ResolveDatabaseInstance()
	contact := pkg.ResolveCacheInstance()
	tokenManager := pkg.ResolveTokenManager(contact)
	middlewareFunc := pkg.ResolveJWTMiddlewareFunc(tokenManager)
	userDatasource := auth.ResolveUserDatasource(databaseContract)
	userRepositoryContact := auth.ResolveUserRepo(userDatasource)
	domainTokenManager := auth.ResolveTokenManager(tokenManager)
	passwordChecker := auth.ResolvePasswordChecker()
	userUseCaseContract := auth.ResolveUserUseCase(userRepositoryContact, domainTokenManager, passwordChecker)
	controller := auth.ResolveV1Controller(userUseCaseContract, contract, databaseContract)
	catDatasource := category.ResolveCatDatasource(databaseContract)
	categoryRepositoryContract := category.ResolveCatRepo(catDatasource)
	categoryUseCaseContract := category.ResolveCatUseCase(categoryRepositoryContract)
	v1Controller := category.ResolveCatV1Controller(contract, databaseContract, categoryUseCaseContract)
	app := NewApplication(contract, databaseContract, contact, middlewareFunc, controller, v1Controller)
	return app
}
